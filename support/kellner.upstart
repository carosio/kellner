start on runlevel [2345]

# optional stuff
description "Start and stop kellner"
version "0.3.1"
author "Helge Sychla <helge.sychla@travelping.com>"


# configuration variables.
# You'll want to change these as needed
#
# ip and port to bind to
env KELLNER_IP=0.0.0.0
env KELLNER_PORT=80
#env KELLNER_PORT=443
# PEM encoded ssl-certificate
#env KELLNER_TLS_CERT=/etc/ssl/certs/example.com.crt
# PEM encoded ssl-key
#env KELLNER_TLS_KEY=/etc/ssl/private/example.com.key
# directory containing the packages
env KELLNER_ROOT=/var/www/example.com/packages/
# number of workers
env KELLNER_WORKERS=2
# require a client-certificate
env KELLNER_CLIENT_CERT=true
# directory containing the client-mappings
env KELLNER_CLIENT_MAP=/var/www/example.com/identities/
# use 'gzip' to compress the package index. if false: use golang
env KELLNER_GZIP=true
# calculate md5 of scanned packages
env KELLNER_MD5=true
# calculate sha1 of scanned packages
env KELLNER_SHA1=false
# log to given filename
env KELLNER_LOG=/var/log/kellner.log

exec /usr/sbin/kellner -bind=$KELLNER_IP:$KELLNER_PORT \
                       -root=$KELLNER_ROOT \
                       -tls-cert=$KELLNER_SSL_CERT \
                       -tls-key=$KELLNER_SSL_KEY \
                       -workers=$KELLNER_WORKERS \
                       -gzip=$KELLNER_GZIP \
                       -md5=$KELLNER_MD5 \
                       -require-client-cert=$KELLNER_CLIENT_CERT \
                       -sha1=$KELLNER_SHA1 \
                       -log=$KELLNER_LOG

respawn
respawn limit 5 10
